import I from 'immutable'

import keyedReducer from '../src/keyedReducer'

test('set value at key', () => {
  const s  = I.Map()
  const a  = { payload: 1 }
  const rd = keyedReducer('val')
  const ns = rd(s, a)
  const nv = ns.get('val')

  expect(nv).toBe(1)
})

test('set value at keypath', () => {
  const s  = I.Map()
  const a  = { payload: 1 }
  const rd = keyedReducer(['foo', 'bar', 'foobar'])
  const ns = rd(s, a)
  const nv = ns.getIn(['foo', 'bar', 'foobar'])

  expect(nv).toBe(1)
})

test('set value at key generated by fn', () => {
  const s  = I.Map()
  const a  = { payload: ['foo', 'bar'] }
  const kg = (s, a) => a.payload[0]
  const rd = keyedReducer(kg)
  const ns = rd(s, a)
  const nv = ns.get('foo')

  expect(nv).toEqual(['foo', 'bar'])
})

test('set value transformed by transformer at keypath generated by fn', () => {
  const s  = I.Map()
  const a  = { payload: ['foo', 'bar'] }
  const kg = (s, a) => a.payload
  const ts = x => x[1]
  const rd = keyedReducer(kg, ts)
  const ns = rd(s, a)
  const nv = ns.getIn(['foo', 'bar'])

  expect(nv).toBe('bar')
})
